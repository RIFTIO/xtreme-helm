# Copyright 2020 RIFT Inc
# Copyright 2021-2022 DZS Inc
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rw-redis
  namespace: {{ .Values.global.namespace.name }}
  labels:
    app: rw.redis
spec:
  replicas: 1
  serviceName: {{ include "redis.fullname" . }}
  selector:
    matchLabels:
      app: rw.redis
  template:
    metadata:
      labels:
        app: rw.redis
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        {{ if .Values.imagePullSecrets }}
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
        {{ else }}
        {{- toYaml .Values.global.imagePullSecrets | nindent 8 }}
        {{- end }}

      hostAliases:
      {{- range $i, $value := .Values.global.hostAliases }}
      - ip: {{ $value.ip | quote }}
        hostnames:
        {{- range $value.hostnames }}
        - {{ . }}
        {{- end }}
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
        runAsUser: {{ .Values.containerSecurityContext.runAsUser }}
        {{- if and .Values.global.ensureSecurityContext (not (has "appRedis" .Values.global.excludeAppsInSecurityContext)) }}
        seccompProfile:
          type: RuntimeDefault
        runAsGroup: {{ .Values.global.defaultGroup }}
        {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if .Values.enableVolumePermissions }}
      initContainers:
      - name: redis-pl-perm
        image: {{ .Values.busybox.image.repository }}
        imagePullPolicy: {{ .Values.busybox.image.pullPolicy | quote }}
        command: ["chown", "-R", "{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}", /data]
        securityContext:
          runAsUser: 0
          capabilities:
            drop:
            - CAP_NET_RAW
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: data
          mountPath: /data
          readOnly: false
      {{- end }}

      containers:
       {{- if .Values.global.install.orchestrator }}
        - name: redtunnel
          image: "{{ .Values.redTunnel.image.repository }}:{{ .Values.redTunnel.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.redTunnel.image.pullPolicy }}
          command: ["python3", "/rift/redtunnel/redtunnel.py"]
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 15
            periodSeconds: 20
          env:
          - name: RW_K8S_NAMESPACE
            value: {{ .Values.global.namespace.name }}

          {{- if and .Values.global.ensureSecurityContext (not (has "appRedis" .Values.global.excludeAppsInSecurityContext)) }}
          securityContext:
            {{ toYaml .Values.global.partialSecurityContext | nindent 12 }}
            runAsUser: {{ .Values.redis.runAsUser }}
            runAsGroup: {{ .Values.global.defaultGroup }}
          {{- end }}

          {{- if and .Values.global.ensureResourceQuota (not (has "appRedis" .Values.global.excludeAppsInResourceQuota)) }}
          {{- include "common.small.ephemeral" . | nindent 2 }}
          {{- end }}

          volumeMounts:
          - name: tls-cert
            mountPath: /etc/ssl/rw
          {{- if and .Values.global.ensureEmptyDirCreation (not (has "appRedis" .Values.global.excludeAppsInEmptyDirCreation)) }}
          - name: tmp-vol
            mountPath: /tmp
          {{- end }}
        {{- end }}

        - name: redis-exporter
          image: "{{ .Values.exporter.image.repository }}:{{ .Values.exporter.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.exporter.image.pullPolicy }}

          {{- if and .Values.global.ensureSecurityContext (not (has "appRedis" .Values.global.excludeAppsInSecurityContext)) }}
          securityContext:
            {{ toYaml .Values.global.partialSecurityContext | nindent 12 }}
            runAsUser: {{ .Values.redis.runAsUser }}
            runAsGroup: {{ .Values.global.defaultGroup }}
          {{- end }}

          ports:
           - name: rwredis-exp
             containerPort: 9121
             protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 9121
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 9121
            initialDelaySeconds: 15
            periodSeconds: 20

          {{- if and .Values.global.ensureResourceQuota (not (has "appRedis" .Values.global.excludeAppsInResourceQuota)) }}
          {{- include "common.small" . | nindent 2 }}
          {{- end }}

          command:
          - /redis_exporter

        - name: redis
          {{- if and .Values.global.ensureSecurityContext (not (has "appRedis" .Values.global.excludeAppsInSecurityContext)) }}
          securityContext:
            {{ toYaml .Values.global.partialSecurityContext | nindent 12 }}
            runAsUser: {{ .Values.redis.runAsUser }}
            runAsGroup: {{ .Values.global.defaultGroup }}
          {{- else }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}

          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          ports:
            - name: rwredis
              containerPort: 6379
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 15
            periodSeconds: 20

          command:
          - redis-server
          args:
            - '/config/rw-redis.conf'
            {{- if .Values.redisCustomNetworking.bindToAllAddresses }}
            - '--bind 0.0.0.0 ::'
            {{- else }}
            {{- if .Values.global.ipv6Mode }}
            - '--bind ::'
            {{- end }}
            {{- end }}

          {{- if and .Values.global.ensureResourceQuota (not (has "appRedis" .Values.global.excludeAppsInResourceQuota)) }}
          {{- include "common.small.ephemeral" . | nindent 2 }}
          {{- else }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}

          volumeMounts:
          - name: data
            mountPath: /data
            readOnly: false
          - name: rw-redis-config
            mountPath: /config
            readOnly: false
          {{- if and .Values.global.ensureEmptyDirCreation (not (has "appRedis" .Values.global.excludeAppsInEmptyDirCreation)) }}
          - name: tmp-vol
            mountPath: /tmp
            readOnly: false
          {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
        - name: rw-redis-config
          configMap:
            name: rw-redis-config
        {{- if .Values.global.install.orchestrator }}
        - name: tls-cert
          secret:
            secretName: rw-tls-secret
        {{- end }}
        {{- if and .Values.global.ensureEmptyDirCreation (not (has "appRedis" .Values.global.excludeAppsInEmptyDirCreation)) }}
        - name: tmp-vol
          emptyDir:
            sizeLimit: 500Mi
        {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.redisStorage.capacity }}
      storageClassName: {{ .Values.redisStorage.storageClassName }}
