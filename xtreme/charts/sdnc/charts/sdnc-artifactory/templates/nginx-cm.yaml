{{- if .Values.nginx.enabled -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "sdnc-artifactory.fullname" . }}-nginx-conf
  namespace: {{ include "sdnc.namespace" . }}
  labels:
    {{- include "sdnc-artifactory.labels" . | nindent 4 }}-nginx
data:
  nginx.conf: |
    # Main Nginx configuration file
    worker_processes  4;

    {{- if .Values.nginx.logs.stderr }}
    error_log  stderr {{ .Values.nginx.logs.level }};
    {{- else -}}
    error_log  {{ .Values.nginx.persistence.mountPath }}/logs/error.log {{ .Values.nginx.logs.level }};
    {{- end }}
    pid        /var/run/nginx.pid;

    events {
      worker_connections  1024;
    }

    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      variables_hash_max_size 1024;
      variables_hash_bucket_size 64;
      server_names_hash_max_size 4096;
      server_names_hash_bucket_size 128;
      types_hash_max_size 2048;
      types_hash_bucket_size 64;
      proxy_read_timeout 2400s;
      client_header_timeout 2400s;
      client_body_timeout 2400s;
      proxy_connect_timeout 75s;
      proxy_send_timeout 2400s;
      proxy_buffer_size 128k;
      proxy_buffers 40 128k;
      proxy_busy_buffers_size 128k;
      proxy_temp_file_write_size 250m;
      proxy_http_version 1.1;
      client_body_buffer_size 128k;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

      log_format timing 'ip = $remote_addr '
      'user = \"$remote_user\" '
      'local_time = \"$time_local\" '
      'host = $host '
      'request = \"$request\" '
      'status = $status '
      'bytes = $body_bytes_sent '
      'upstream = \"$upstream_addr\" '
      'upstream_time = $upstream_response_time '
      'request_time = $request_time '
      'referer = \"$http_referer\" '
      'UA = \"$http_user_agent\"';

      {{- if .Values.nginx.logs.stdout }}
      access_log /dev/stdout timing;
      {{- else -}}
      access_log {{ .Values.nginx.persistence.mountPath }}/logs/access.log timing;
      {{- end }}

      sendfile        on;
      #tcp_nopush     on;

      keepalive_timeout  65;

      #gzip  on;

      include /etc/nginx/conf.d/*.conf;

    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "sdnc-artifactory.fullname" . }}-nginx-artifactory-conf
  namespace: {{ include "sdnc.namespace" . }}
  labels:
    {{- include "sdnc-artifactory.labels" . | nindent 4 }}-nginx
data:
  artifactory.conf: |
    {{- if .Values.nginx.https.enabled }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_certificate  {{ .Values.nginx.persistence.mountPath }}/ssl/tls.crt;
    ssl_certificate_key  {{ .Values.nginx.persistence.mountPath }}/ssl/tls.key;
    ssl_session_cache shared:SSL:1m;
    ssl_prefer_server_ciphers   on;
    {{- end }}
    ## server configuration
    server {
    {{- if .Values.nginx.internalPortHttps }}
    {{- if .Values.nginx.singleStackIPv6Cluster }}
    listen [::]:{{ .Values.nginx.internalPortHttps }} ssl;
    {{- else -}}
    listen {{ .Values.nginx.internalPortHttps }} ssl;
    {{- end }}
    {{- else -}}
    {{- if .Values.nginx.https.enabled }}
    {{- if .Values.nginx.singleStackIPv6Cluster }}
    listen [::]:{{ .Values.nginx.https.internalPort }} ssl;
    {{- else -}}
    listen {{ .Values.nginx.https.internalPort }} ssl;
    {{- end }}
    {{- end }}
    {{- end }}
    {{- if .Values.nginx.internalPortHttp }}
    {{- if .Values.nginx.singleStackIPv6Cluster }}
    listen [::]:{{ .Values.nginx.internalPortHttp }};
    {{- else -}}
    listen {{ .Values.nginx.internalPortHttp }};
    {{- end }}
    {{- else -}}
    {{- if .Values.nginx.http.enabled }}
    {{- if .Values.nginx.singleStackIPv6Cluster }}
    listen [::]:{{ .Values.nginx.http.internalPort }};
    {{- else -}}
    listen {{ .Values.nginx.http.internalPort }};
    {{- end }}
    {{- end }}
    {{- end }}
    server_name ~(?<repo>.+)\.{{ include "artifactory.fullname" . }} {{ include "artifactory.fullname" . }};

    if ($http_x_forwarded_proto = '') {
      set $http_x_forwarded_proto  $scheme;
    }
    set $host_port {{ .Values.nginx.https.externalPort }};
    if ( $scheme = "http" ) {
      set $host_port {{ .Values.nginx.http.externalPort }};
    }
    ## Application specific logs
    ## access_log /var/log/nginx/artifactory-access.log timing;
    ## error_log /var/log/nginx/artifactory-error.log;
    rewrite ^/artifactory/?$ / redirect;
    if ( $repo != "" ) {
      rewrite ^/(v1|v2)/(.*) /artifactory/api/docker/$repo/$1/$2 break;
    }
    chunked_transfer_encoding on;
    client_max_body_size 0;

    location / {
      proxy_read_timeout  900;
      proxy_pass_header   Server;
      proxy_cookie_path   ~*^/.* /;
      proxy_pass          http://{{ include "artifactory.fullname" . }}:{{ .Values.service.targetPort }}/;
      {{- if .Values.nginx.service.ssloffload}}
      proxy_set_header    X-JFrog-Override-Base-Url $http_x_forwarded_proto://$host;
      {{- else }}
      proxy_set_header    X-JFrog-Override-Base-Url $http_x_forwarded_proto://$host:$host_port;
      proxy_set_header    X-Forwarded-Port  $server_port;
      {{- end }}
      proxy_set_header    X-Forwarded-Proto $http_x_forwarded_proto;
      proxy_set_header    Host              $http_host;
      proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
      {{- if .Values.nginx.disableProxyBuffering}}
      proxy_http_version 1.1;
      proxy_request_buffering off;
      proxy_buffering off;
      {{- end }}
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      location /artifactory/ {
        if ( $request_uri ~ ^/artifactory/(.*)$ ) {
          proxy_pass       http://{{ include "artifactory.fullname" . }}:{{ .Values.service.portinternal }}/artifactory/$1;
        }
        proxy_pass         http://{{ include "artifactory.fullname" . }}:{{ .Values.service.portinternal }}/artifactory/;
      }
      location /pipelines/ {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_pass  http://{{ include "artifactory.fullname" . }}:{{ .Values.service.portinternal}};
      }
    }
    }
{{- end }}
